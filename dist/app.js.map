{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/hell.ts","webpack:///./src/components/builds-grid.component.ts","webpack:///./src/index.ts","webpack:///./src/services/dom.service.ts","webpack:///./src/services/modals.service.ts","webpack:///./src/components/index.ts","webpack:///./src/components/comparison.component.ts","webpack:///./src/components/main-modal.component.ts","webpack:///./src/utils.ts","webpack:///./src/services/app.service.ts","webpack:///./src/services/config.service.ts","webpack:///./src/services/db.service.ts","webpack:///./src/services/jenkins.service.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","mirror","callbacks","Set","cb","this","add","delete","afterDestroyCb","forEach","$dom","$config","prefix","styles","tdInterpolator","makeInterpolator","thInterpolator","rowInterpolator","gridRenderer","makeRenderer","destroyCbs","Hell","renderDestroyCbs","params","builds","selectedBuildIds","onBuildClick","paramKeys","keys","ref","render","refreshParams","insertGlobalStyles","addEventListener","root$","e","row$","target","nodeName","parentElement","getAttribute","undefined","idx","Array","from","children","indexOf","Error","build","selected","id","clear","dynamicKeys","dynamic","rows","map","k","content","join","rowCssClasses","dynamicHeadings","tplRef","remove","append","links","linksAll","componentInstance","childComponentRefs","filter","ConfigService","onInit","$jenkins","JenkinsService","DomService","$db","DbService","$modals","ModalsService","$app","AppService","html","wrapper$","document","createElement","innerHTML","slice","querySelectorAll","reduce","all","element$","assign","console","warn","push","parent","newChild","Promise","one","appendOne","parent$","isTemplateRef","child$","comp","isComponentRef","onBeforeInsert","appendChild","onAfterInsert","arg","node","removeOne","entity","onBeforeRemove","removeChild","onAfterRemove","style$","setAttribute","head","removeCb","raw","String","replace","type","listener","options","removeEventListener","tpl","vars","localTpl","varName","RegExp","interpolator","compile","isMainGridOpened","text","title","MainModalComponent","createTextNode","size","insertToBody","actions","tooltip","clearCurrentBuildJob","refreshGrid","validateClearBtn","result","compareTwoSelectedBuild","openComparisonModal","retrieveBuild","saveBuild","close","gridComp","BuildsGridComponent","refresh","toggleBuildSelection","validateCompareBtn","getAllBuilds","getSelectedBuildIds","getRef","buttons$","action","btn$","parseInt","sort","a","b","clearBtn$","compareBtn$","retrieveBtn$","canRetrieve","isPageHasInfoAboutFailedTests","disabled","isValid","length","comparisonComp","ComparisonComponent","testInterpolator","mainRenderer","res","firstFailed","makeFailedTestsListHtml","first","failedTests","secondFailed","second","onlyFirstFailed","onlyFirst","onlySecondFailed","onlySecond","bothFailed","both","firstFailedCount","secondFailedCount","onlyFirstFailedCount","onlySecondFailedCount","bothFailedCount","firstId","secondId","gridRef","grid","tests","test","makeAnchorHtml","link","makeJiraLink","testId","normalizedId","jiraUrl","transitionTimeMs","openedBodyCssClass","openedBackdropCssClass","isShown","isPending","lastDestroyCbs","backdropRenderer","actionButtonInterpolator","modalRenderer","openedModalRefs","has","isInserted","body","bindEscToClose","bindEvents","setTimeout","toggle","show","resolve","isOne","classList","later","backdrop$","createRoot","modal","actionButtonsHtml","sanitizeAttrValue","actionButtonIdx","modalRef","content$","contentToInsert","childComponents","v","baseArgs","component","button$","def","event","destroyCb","code","last","getLastInsertedMainModal","delay","initDb","buildOpenHotKey","hk","hotKeys","openMainModal","hasSelectedBuildJob","alert","altKey","alt","ctrlKey","ctrl","shiftKey","shift","openMainGrid","hotKeyLabel","info","buildJobName","retrieveBuildJobName","selectBuildJob","dbName","openMainModalHotKey","window","ftcConfig","validateHotKey","error","hotkey","data","makeInitialDb","currentBuildJobName","byBuildJob","load","getCurrentBuildJob","bj","buildsOrder","was","save","buildId","select","prevLen","other","makeEmptyBuildJob","ids","getBuildById","some","dataAsStr","toJSON","JSON","stringify","localStorage","setItem","getItem","parse","version","querySelector","retrieveBuildInfo","retrieveFailedTests","location","pathname","h1$","textContent","match","date","groups","description$","innerText","split","q"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export class Hell {\n  private callbacks = new Set<() => void>();\n\n  public constructor(\n    private mirror?: Hell,\n  ) {}\n\n  public add(cb: () => void): void {\n    this.callbacks.add(cb);\n    this.mirror && this.mirror.add(cb);\n  }\n\n  public delete(cb: () => void): void {\n    this.callbacks.delete(cb);\n    this.mirror && this.mirror.delete(cb);\n  }\n\n  public clear(afterDestroyCb?: (cb: () => void) => void): void {\n    this.callbacks.forEach(cb => {\n      cb();\n      this.delete(cb);\n\n      afterDestroyCb && afterDestroyCb(cb)\n    });\n  }\n\n}\n","import { DomService } from '../services/dom.service';\nimport { ConfigService } from '../services/config.service';\nimport {\n  Build,\n  BuildInfo,\n  Component,\n  ComponentRef, OnAfterInsert, OnAfterRemove, OnBeforeInsert,\n  OnBeforeRemove, TemplateRef,\n} from '../models';\nimport { Hell } from '../hell';\n\nexport interface BuildsGridClickParams {\n  build: Build;\n  selected: boolean;\n}\n\nexport interface BuildsGridParams {\n  builds: Build[];\n  selectedBuildIds: number[];\n  onBuildClick: (params: BuildsGridClickParams) => void;\n}\n\ninterface CellVars {\n  content: string;\n}\n\ninterface RowVars extends Omit<BuildInfo, 'dynamic'> {\n  dynamic: string;\n  rowCssClasses: string;\n}\n\ninterface GridVars {\n  dynamicHeadings: string;\n  rows: string;\n}\n\ninterface GridLinksAll {\n  build: HTMLTableRowElement[];\n}\ntype BuildsGridTemplateRef = TemplateRef<{}, GridLinksAll>;\n\ntype BuildsGridComponentRef = ComponentRef<Component, {}, GridLinksAll>;\n\nexport class BuildsGridComponent implements Component, OnBeforeInsert, OnAfterInsert, OnBeforeRemove, OnAfterRemove {\n\n  private prefix = `${this.$config.prefix}-grid`;\n\n  private styles = `\n        .${ this.prefix } {\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n        }\n        .${ this.prefix } table {\n          width: 100%;\n          border-spacing: 0;\n        }\n        .${ this.prefix } td, .${ this.prefix } th {\n          border-bottom: 1px solid #aaa;\n          padding: 7px 5px;\n          text-align: center;\n        }\n        .${ this.prefix } tbody tr {\n          cursor: pointer;\n          transition: background-color .25s ease-in-out;\n        }\n        .${ this.prefix } tbody tr:hover {\n          background-color: #A1EEEA;\n          transition: background-color .15s ease-in-out;\n        }\n        .${ this.prefix } tbody tr.selected {\n          background-color: #ABFFAB;\n        }\n      `;\n\n  private tdInterpolator = this.$dom.makeInterpolator<CellVars>(`<td>{{ content }}</td>`);\n  private thInterpolator = this.$dom.makeInterpolator<CellVars>(`<td>{{ content }}</td>`);\n  private rowInterpolator = this.$dom.makeInterpolator<RowVars>(`\n    <tr class=\"{{ rowCssClasses }}\" data-select-all=\"build\">\n      <td>{{ id }}</td>\n      <td>{{ name }}</td>\n      <td>{{ date }}</td>\n      {{ dynamic }}\n    </tr>\n  `);\n  private gridRenderer = this.$dom.makeRenderer<GridVars, BuildsGridTemplateRef>(`\n    <div class=\"${this.prefix}\">\n      <table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Name</th>\n            <th>Date</th>\n            {{ dynamicHeadings }}\n          </tr>\n        </thead>\n        <tbody>{{ rows }}</tbody>\n      </table>\n    </div>\n  `);\n\n  private ref?: BuildsGridComponentRef;\n\n  private destroyCbs = new Hell();\n  private renderDestroyCbs = new Hell(this.destroyCbs);\n\n  private params: Required<BuildsGridParams> = {\n    builds: [],\n    selectedBuildIds: [],\n    onBuildClick: () => {},\n  };\n  private paramKeys = Object.keys(this.params) as (keyof Required<BuildsGridParams>)[];\n\n  public constructor(\n    private readonly $dom: DomService,\n    private readonly $config: ConfigService,\n  ) {}\n\n  public getRef(): BuildsGridComponentRef {\n    return this.ref || this.render();\n  }\n\n  public refresh(params: Partial<BuildsGridParams>): void {\n    this.refreshParams(params);\n\n    if (params.selectedBuildIds || params.builds) {\n      this.render();\n    }\n  }\n\n  public onBeforeInsert(): void {\n    this.destroyCbs.add(this.$dom.insertGlobalStyles(this.styles));\n  }\n\n  public onAfterInsert(): void {\n    const cb = (e: MouseEvent): void => {\n      const row$: HTMLTableRowElement | undefined = e.target\n      && (e.target as HTMLElement).nodeName === 'TD'\n      && (e.target as HTMLElement).parentElement!.getAttribute('data-select-all') === 'build'\n      && (e.target as HTMLElement).parentElement as HTMLTableRowElement\n      || undefined;\n\n      if (!row$) return;\n\n      const idx = Array.from(row$.parentElement!.children).indexOf(row$);\n      if (idx < 0) throw new Error(`Can not find row index`);\n\n      const build = this.params.builds[idx];\n      if (!build) throw new Error(`Can not find build by the row index`);\n\n      const selected = this.params.selectedBuildIds.indexOf(build.id) > -1;\n\n      this.params.onBuildClick({ build, selected });\n    };\n    this.destroyCbs.add(this.$dom.addEventListener(this.ref!.root$, 'click', cb));\n  }\n\n  public onBeforeRemove(): void {\n    this.destroyCbs.clear();\n  }\n\n  public onAfterRemove(): void {\n    this.ref = undefined;\n  }\n\n  private render(): BuildsGridComponentRef {\n    this.renderDestroyCbs.clear();\n\n    if (!this.params.builds) {\n      throw new Error(`No builds param`);\n    }\n\n    const dynamicKeys = this.params.builds[0] && Object.keys(this.params.builds[0].dynamic) || [];\n\n    const rows = this.params.builds.map((r: Build) =>\n      this.rowInterpolator({\n        ...r,\n        dynamic: dynamicKeys.map(k => this.tdInterpolator({ content: r.dynamic[k] })).join(''),\n        rowCssClasses: this.params.selectedBuildIds.indexOf(r.id) > -1 ? 'selected' : '',\n      }),\n    ).join('\\n');\n\n    const dynamicHeadings = dynamicKeys.map(k => this.thInterpolator({ content: k })).join('\\n');\n\n    const tplRef = this.gridRenderer({\n      rows,\n      dynamicHeadings,\n    });\n\n    if (!this.ref) {\n      this.ref = { ...tplRef, componentInstance: this, childComponentRefs: [] };\n    } else {\n      this.$dom.remove(Array.from(this.ref.root$.children));\n      this.$dom.append(this.ref, Array.from(tplRef.root$.children));\n      this.ref.links = tplRef.links;\n      this.ref.linksAll = tplRef.linksAll;\n    }\n\n    return this.ref;\n  }\n\n  private refreshParams(params: Partial<BuildsGridParams>): void {\n    this.paramKeys\n        .filter(key => params[key] !== undefined)\n        // @ts-ignore\n        .forEach(key => this.params[key] = params[key]);\n  }\n}\n","import { DomService } from './services/dom.service';\nimport { ModalsService } from './services/modals.service';\nimport { AppService } from './services/app.service';\nimport { ConfigService } from './services/config.service';\nimport { DbService } from './services/db.service';\nimport { JenkinsService } from './services/jenkins.service';\n\n\nconst $config = new ConfigService();\n// ConfigService is the only service in which .onInit() should be executed immediately\n$config.onInit();\n\nconst $jenkins = new JenkinsService();\nconst $dom = new DomService();\nconst $db = new DbService($config);\nconst $modals = new ModalsService($dom, $config, $jenkins, $db);\nconst $app = new AppService($modals, $db, $jenkins, $config);\n\n$db.onInit(); // should be before $app.\n$app.onInit();\n","import { TemplateRef, OnDestroy, Vars, ComponentRef, ComponentDev } from '../models';\n\nexport class DomService implements OnDestroy {\n\n  private destroyCbs = new Set<() => void>();\n\n  public onDestroy(): void {\n    this.destroyCbs.forEach(cb => {\n      cb();\n      this.destroyCbs.delete(cb);\n    });\n  }\n\n  public compile<T extends TemplateRef>(html: string): T {\n    const wrapper$ = document.createElement('div');\n    wrapper$.innerHTML = html;\n    const root$ = wrapper$.children[0] as HTMLElement | null;\n    if (!root$) {\n      throw new Error(`Can not compile HTML: ` + html.slice(100));\n    }\n\n    const links = (new Array(...wrapper$.querySelectorAll('[data-select]')) as HTMLElement[])\n      .reduce(\n        (all: TemplateRef['links'], element$: HTMLElement) => {\n          Object.assign(all);\n          const name: string | null = element$.getAttribute('data-select');\n          if (!name) {\n            console.warn(new Error('Empty data-select attribute'));\n            return all;\n          }\n          if (all[name]) {\n            console.warn(new Error('Multiple links with the same name: ' + name));\n          }\n          all[name] = element$;\n\n          return all;\n        },\n        {},\n      );\n\n    const linksAll = (new Array(...wrapper$.querySelectorAll('[data-select-all]')) as HTMLElement[])\n      .reduce(\n        (all: TemplateRef['linksAll'], element$: HTMLElement) => {\n          Object.assign(all);\n          const name: string | null = element$.getAttribute('data-select-all');\n          if (!name) {\n            console.warn(new Error('Empty data-select-all attribute'));\n            return all;\n          }\n          if (!all[name]) all[name] = [];\n\n          all[name].push(element$);\n\n          return all;\n        },\n        {},\n      );\n\n    // for collect link to wrapper$\n    this.remove(root$);\n\n    return {\n      root$,\n      links,\n      linksAll,\n    } as T;\n  } // end compile()\n\n  public async append<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(parent: Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>, newChild: T): Promise<T>;\n  public async append<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(parent: Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>, newChild: T[]): Promise<T[]>;\n  public async append<T extends Element | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(parent: Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>, newChild: T | T[]): Promise<T | T[]> {\n    return newChild instanceof Array\n           ? Promise.all(newChild.map(async (one) => await this.appendOne(parent, one)))\n           : await this.appendOne(parent, newChild);\n  }\n\n  private async appendOne<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(\n    parent: Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>,\n    newChild: T,\n  ): Promise<T> {\n    const parent$: Node = this.isTemplateRef(parent) ? parent.root$ : parent as Node;\n    const child$: Node = this.isTemplateRef(newChild) ? newChild.root$ : newChild as Node;\n    const comp: ComponentDev | undefined = this.isComponentRef(newChild) ? newChild.componentInstance : undefined;\n\n    comp && comp.onBeforeInsert && await comp.onBeforeInsert();\n    parent$.appendChild(child$);\n    comp && comp.onAfterInsert && await comp.onAfterInsert();\n\n    return newChild;\n  }\n\n  public async remove<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(node: T): Promise<T>;\n  public async remove<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(nodes: T[]): Promise<T[]>;\n  public async remove<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(arg: T | T[]): Promise<T | T[]> {\n    return arg instanceof Array\n           ? Promise.all(arg.map(async (node) => await this.removeOne(node)))\n           : await this.removeOne(arg);\n  }\n\n  private async removeOne<T extends Node | ComponentRef<ComponentDev, any, any> | TemplateRef<any, any>>(entity: T): Promise<T> {\n    const node = this.isTemplateRef(entity) ? entity.root$ : entity as Node;\n    const parent = node.parentElement || undefined;\n    const comp: ComponentDev | undefined = this.isComponentRef(entity) ? entity.componentInstance : undefined;\n\n    if (parent) {\n      comp && comp.onBeforeRemove && await comp.onBeforeRemove();\n      parent.removeChild(node);\n      comp && comp.onAfterRemove && await comp.onAfterRemove();\n    }\n\n    return entity;\n  }\n\n  public insertGlobalStyles(styles: string): () => void {\n    const style$: HTMLStyleElement = document.createElement('style');\n    style$.setAttribute('type', 'text/css');\n\n    style$.innerHTML = styles;\n    document.head.appendChild(style$);\n\n    const removeCb = () => this.remove(style$);\n    this.destroyCbs.add(removeCb);\n\n    return () => {\n      removeCb();\n      this.destroyCbs.delete(removeCb);\n    };\n  }\n\n  public sanitizeAttrValue(raw: string | number): string {\n    return String(raw).replace(/['\" ]/g, '_');\n  }\n\n  public sanitizeHtml(raw: string): string {\n    return String(raw).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n\n  public addEventListener<K extends keyof DocumentEventMap>(element$: Document, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): () => void;\n  public addEventListener<K extends keyof ElementEventMap>(element$: Element, type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions, ): () => void;\n  public addEventListener<K extends keyof GlobalEventHandlersEventMap>(element$: HTMLElement, type: K, listener: ( this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K], ) => any, options?: boolean | AddEventListenerOptions, ): () => void;\n  public addEventListener(\n    element$: Element | Document,\n    type: string,\n    listener: (...args: any[]) => any,\n    options?: object,\n  ): () => void {\n    element$.addEventListener(type, listener, options);\n    return () => element$.removeEventListener(type, listener);\n  }\n\n  /**\n   * Insert variables to the template\n   */\n  public interpolate<T>(tpl: string, vars: T): string {\n    return this.makeInterpolator(tpl)(vars);\n  }\n\n  public makeInterpolator<T>(tpl: string): (vars: T) => string {\n    return (vars: T) => Object\n      .keys(vars)\n      .reduce(\n        (localTpl, varName) =>\n          localTpl.replace(\n            new RegExp(`{{\\\\s*${ varName }\\\\s*}}`, 'g'),\n            // @ts-ignore\n            vars[varName] !== undefined ? String(vars[varName]) : '',\n          ),\n        tpl,\n      );\n  }\n\n  public makeRenderer<\n    V = {},\n    T extends TemplateRef<any, any> = TemplateRef<{}, {}>\n  >(tpl: string): (vars?: V) => T {\n    const interpolator = this.makeInterpolator(tpl);\n    return (vars: V = {} as V) => this.compile(interpolator(vars));\n  }\n\n  public isComponentRef(entity: ComponentRef | unknown): entity is ComponentRef {\n    return !!((entity as ComponentRef).root$ && (entity as ComponentRef).componentInstance);\n  }\n\n  private isTemplateRef(entity: TemplateRef | unknown): entity is TemplateRef {\n    return !!((entity as TemplateRef).root$ && (entity as TemplateRef).linksAll);\n  }\n\n}\n","import {\n  MainModalComponent,\n  MainModalParams,\n  ModalActionButtonDef,\n  BuildsGridClickParams,\n  BuildsGridComponent,\n  ComparisonComponent,\n} from '../components';\nimport { ComparisonResult } from '../models';\n\nimport { DomService } from './dom.service';\nimport { ConfigService } from './config.service';\nimport { JenkinsService } from './jenkins.service';\nimport { DbService } from './db.service';\n\nexport class ModalsService {\n  public isMainGridOpened = false;\n\n  public constructor(\n    private readonly $dom: DomService,\n    private readonly $config: ConfigService,\n    private readonly $jenkins: JenkinsService,\n    private readonly $db: DbService,\n  ) {}\n\n  public alert(text: string, title = 'Warning!'): void {\n    const comp = new MainModalComponent(this.$dom, this.$config);\n    const text$ = document.createTextNode(text);\n    const params: MainModalParams = {\n      title,\n      content: [ text$ ],\n      size: 'smw',\n    };\n    comp.insertToBody(params);\n  }\n\n  // @todo: decompose this method\n  public async openMainGrid(): Promise<void> {\n    const comp = new MainModalComponent(this.$dom, this.$config);\n\n    const actions: ModalActionButtonDef[] = [\n      {\n        name: 'Clear',\n        tooltip: 'Clear whole retrieved for the builds',\n        cb: () => {\n          this.$db.clearCurrentBuildJob();\n          refreshGrid();\n          validateClearBtn();\n        }\n      },\n      {\n        name: 'Compare',\n        cb: () => {\n          const result = this.$db.compareTwoSelectedBuild();\n          this.openComparisonModal(result);\n        }\n      },\n      {\n        name: 'Retrieve',\n        cb: () => {\n          const build = this.$jenkins.retrieveBuild();\n          this.$db.saveBuild(build);\n          refreshGrid();\n          validateClearBtn();\n        },\n      },\n      {\n        name: 'Cancel',\n        tooltip: 'Just closes the modal',\n        cb: ({ close }) => {\n          close();\n        },\n      },\n    ];\n\n    const onBuildClick = ({ build, selected }: BuildsGridClickParams): void => {\n      this.$db.toggleBuildSelection(build.id, !selected);\n      refreshGrid();\n      validateCompareBtn();\n    };\n    const gridComp = new BuildsGridComponent(this.$dom, this.$config);\n    gridComp.refresh({ onBuildClick });\n\n    const refreshGrid = () => {\n      const builds = this.$db.getAllBuilds();\n      const selectedBuildIds = this.$db.getSelectedBuildIds();\n      gridComp.refresh({ builds, selectedBuildIds })\n    };\n    refreshGrid();\n    const gridRef = gridComp.getRef();\n\n    const params: MainModalParams = {\n      content: [ gridRef ],\n      actions,\n      size: 'lg',\n      title: 'Failed Tests Comparator',\n      onAfterInsert: () => this.isMainGridOpened = true,\n      onBeforeRemove: () => this.isMainGridOpened = false,\n    };\n    const modalRef = await comp.insertToBody(params);\n\n    // find buttons links\n    const buttons$ = modalRef.linksAll.action\n       .map(btn$ => [parseInt(btn$.getAttribute('data-action-button-idx') || '', 10), btn$])\n       .sort(([a], [b]) => +a - +b)\n       .map(([, btn$]) => btn$) as HTMLButtonElement[];\n\n    const clearBtn$ = buttons$[0];\n    const compareBtn$ = buttons$[1];\n    const retrieveBtn$ = buttons$[2];\n\n    // Validate retrieve button on modal open\n    const canRetrieve = this.$jenkins.isPageHasInfoAboutFailedTests();\n    retrieveBtn$.disabled = !canRetrieve;\n    retrieveBtn$.title = canRetrieve\n         ? 'Retrieve build info from the current page and save to compare in the future'\n         : 'This page doesn\\'t have any information about failed tests';\n\n    const validateCompareBtn = () => {\n      const isValid = this.$db.getSelectedBuildIds().length === 2;\n      compareBtn$.disabled = !isValid;\n      compareBtn$.title = isValid\n         ? 'Compare two selected builds'\n         : 'Select two builds first';\n    };\n    const validateClearBtn = () => {\n      const isValid = this.$db.getAllBuilds().length > 0;\n      clearBtn$.disabled = !isValid;\n    };\n\n    validateCompareBtn();\n    validateClearBtn();\n  } // end .openMainGrid()\n\n  public openComparisonModal(result: ComparisonResult): void {\n    const comparisonComp = new ComparisonComponent(this.$dom, this.$config);\n    comparisonComp.refresh({ result });\n    const comparisonRef = comparisonComp.getRef();\n\n\n    const modal = new MainModalComponent(this.$dom, this.$config);\n    const params: MainModalParams = {\n      content: [ comparisonRef ],\n      size: 'lg',\n      title: 'Comparison Results',\n    };\n    modal.insertToBody(params);\n  }\n}\n","export * from './builds-grid.component';\nexport * from './comparison.component';\nexport * from './main-modal.component';\n","import { DomService } from '../services/dom.service';\nimport { ConfigService } from '../services/config.service';\nimport {\n  ComparisonResult,\n  Component,\n  ComponentRef, FailedTest, OnAfterRemove, OnBeforeInsert,\n  OnBeforeRemove, TemplateRef,\n} from '../models';\nimport { Hell } from '../hell';\nimport { BuildsGridComponent } from './builds-grid.component';\n\n\nexport interface ComparisonParams {\n  result?: ComparisonResult;\n}\n\ninterface TestVars {\n  link: string;\n  id: string;\n}\n\ninterface ComparisonVars {\n  firstId: number;\n  secondId: number;\n\n  /** HTML contains <a> elements */\n  firstFailed: string;\n  firstFailedCount: number;\n  /** HTML contains <a> elements */\n  secondFailed: string;\n  secondFailedCount: number;\n\n  /** HTML contains <a> elements */\n  onlyFirstFailed: string;\n  onlyFirstFailedCount: number;\n  /** HTML contains <a> elements */\n  onlySecondFailed: string;\n  onlySecondFailedCount: number;\n\n  /** HTML contains <a> elements */\n  bothFailed: string;\n  bothFailedCount: number;\n}\n\ninterface ComparisonLinks {\n  grid: HTMLDivElement;\n}\n\ntype ComparisonTemplateRef = TemplateRef<ComparisonLinks, {}>;\n\ntype ComparisonComponentRef = ComponentRef<Component, ComparisonLinks, {}>;\n\nexport class ComparisonComponent implements Component, OnBeforeInsert, OnBeforeRemove, OnAfterRemove {\n\n  private prefix = `${this.$config.prefix}-comparison`;\n\n  private styles = `\n        .${ this.prefix } {\n          width: 100%;\n          height: 100%;\n          overflow: auto;\n        }\n        .${this.prefix}-failed-list a {\n          color: #666;\n          text-decoration: none;\n        }\n        .${this.prefix}-failed-list a:hover {\n          color: #000;\n          text-decoration: underline;\n        }\n      `;\n\n  private testInterpolator = this.$dom.makeInterpolator<TestVars>(`<a href=\"{{ link }}\" target=\"_blank\">{{ id }}</a>`);\n  private mainRenderer = this.$dom.makeRenderer<ComparisonVars, ComparisonTemplateRef>(`\n    <div class=\"${this.prefix}\">\n      <div class=\"${this.prefix}-grid\" data-select=\"grid\"></div>\n\n      <h3 class=\"${this.prefix}-heading\">All Failed Tests in #{{ firstId }} ({{ firstFailedCount }}):</h3>\n      <div class=\"${this.prefix}-failed-list\">{{ firstFailed }}</div>\n\n      <h3 class=\"${this.prefix}-heading\">All Failed Tests in #{{ secondId }} ({{ secondFailedCount }}):</h3>\n      <div class=\"${this.prefix}-failed-list\">{{ secondFailed }}</div>\n\n      <h3 class=\"${this.prefix}-heading\">Tests Failed in #{{ firstId }}, but passed in #{{ secondId }} ({{ onlyFirstFailedCount }}):</h3>\n      <div class=\"${this.prefix}-failed-list\">{{ onlyFirstFailed }}</div>\n\n      <h3 class=\"${this.prefix}-heading\">Tests Failed in #{{ secondId }}, but passed in #{{ firstId }} ({{ onlySecondFailedCount }}):</h3>\n      <div class=\"${this.prefix}-failed-list\">{{ onlySecondFailed }}</div>\n\n      <h3 class=\"${this.prefix}-heading\">Tests Failed in both builds ({{ bothFailedCount }}):</h3>\n      <div class=\"${this.prefix}-failed-list\">{{ bothFailed }}</div>\n    </div>\n  `);\n\n  private ref?: ComparisonComponentRef;\n\n  private destroyCbs = new Hell();\n  private renderDestroyCbs = new Hell(this.destroyCbs);\n\n  private params: ComparisonParams = {\n    result: undefined,\n  };\n  private paramKeys = Object.keys(this.params) as (keyof Required<ComparisonParams>)[];\n\n  public constructor(\n    private readonly $dom: DomService,\n    private readonly $config: ConfigService,\n  ) {}\n\n  public getRef(): ComparisonComponentRef {\n    return this.ref || this.render();\n  }\n\n  public refresh(params: Partial<ComparisonParams>): void {\n    this.refreshParams(params);\n\n    if (params.result) {\n      this.render();\n    }\n  }\n\n  public onBeforeInsert(): void {\n    this.destroyCbs.add(this.$dom.insertGlobalStyles(this.styles));\n  }\n\n  public onBeforeRemove(): void {\n    this.destroyCbs.clear();\n  }\n\n  public onAfterRemove(): void {\n    this.ref = undefined;\n  }\n\n  private render(): ComparisonComponentRef {\n    this.renderDestroyCbs.clear();\n\n    if (!this.params.result) {\n      throw new Error(`No .result param`);\n    }\n    const res = this.params.result;\n\n    const firstFailed      = this.makeFailedTestsListHtml(res.first.failedTests);\n    const secondFailed     = this.makeFailedTestsListHtml(res.second.failedTests);\n    const onlyFirstFailed  = this.makeFailedTestsListHtml(res.onlyFirst);\n    const onlySecondFailed = this.makeFailedTestsListHtml(res.onlySecond);\n    const bothFailed       = this.makeFailedTestsListHtml(res.both);\n\n    const firstFailedCount      = res.first.failedTests.length;\n    const secondFailedCount     = res.second.failedTests.length;\n    const onlyFirstFailedCount  = res.onlyFirst.length;\n    const onlySecondFailedCount = res.onlySecond.length;\n    const bothFailedCount       = res.both.length;\n\n    const tplRef = this.mainRenderer({\n      firstId: res.first.id,\n      secondId: res.second.id,\n\n      firstFailed,\n      secondFailed,\n      onlyFirstFailed,\n      onlySecondFailed,\n      bothFailed,\n\n      firstFailedCount,\n      secondFailedCount,\n      onlyFirstFailedCount,\n      onlySecondFailedCount,\n      bothFailedCount,\n    });\n\n    const gridComp = new BuildsGridComponent(this.$dom, this.$config);\n    gridComp.refresh({ builds: [res.first, res.second] });\n    const gridRef = gridComp.getRef();\n\n    this.$dom.append(tplRef.links.grid, gridRef);\n    this.renderDestroyCbs.add(() => this.$dom.remove(gridRef));\n\n    if (!this.ref) {\n      this.ref = { ...tplRef, componentInstance: this, childComponentRefs: [] };\n    } else {\n      this.$dom.remove(Array.from(this.ref.root$.children));\n      this.$dom.append(this.ref, Array.from(tplRef.root$.children));\n      this.ref.links = tplRef.links;\n      this.ref.linksAll = tplRef.linksAll;\n    }\n\n    return this.ref;\n  }\n\n  private refreshParams(params: Partial<ComparisonParams>): void {\n    this.paramKeys\n        .filter(key => params[key] !== undefined)\n        // @ts-ignore\n        .forEach(key => this.params[key] = params[key]);\n  }\n\n  private makeFailedTestsListHtml(tests: FailedTest[]): string {\n    return tests.map(test => this.makeAnchorHtml(test)).join(' ');\n  }\n\n  private makeAnchorHtml(test: FailedTest): string {\n    return this.testInterpolator({\n      id: test.id,\n      link: this.makeJiraLink(test.id),\n    });\n  }\n\n  private makeJiraLink(testId: string): string {\n    const normalizedId = testId.replace('_', '-');\n    return this.$config.jiraUrl ? `${this.$config.jiraUrl}/browse/${normalizedId}` : '';\n  }\n\n}\n","import {\n  TemplateRef,\n  Component,\n  Vars,\n  ComponentRef,\n  OnAfterInsert,\n  OnBeforeRemove,\n} from '../models';\nimport { DomService } from '../services/dom.service';\nimport { ConfigService } from '../services/config.service';\nimport { later } from '../utils';\nimport { Hell } from '../hell';\n\n/**\n * smw - means small width and auto height.\n */\nexport type ModalSizes = 'smw' | 'sm' | 'md' | 'lg';\n\ninterface ModalLinks {\n  modal: HTMLDivElement;\n  close: HTMLAnchorElement;\n  content: HTMLDivElement;\n  actions: HTMLDivElement;\n}\ninterface ActionButtonLinksAll {\n  action: HTMLButtonElement;\n}\ntype ModalTemplateRef = TemplateRef<ModalLinks, {}>;\ntype MainModalComponentRef = ComponentRef<MainModalComponent, ModalLinks, ActionButtonLinksAll>;\n\ninterface ActionButtonVars extends Vars{\n  actionButtonIdx: number;\n  name: string;\n  tooltip: string;\n}\n\ninterface MainModalVars extends Vars {\n  title: string;\n  size: string;\n  actions: string;\n}\n\nexport interface ActionButtonArgs {\n  event: MouseEvent;\n  component: MainModalComponent;\n  button$: HTMLButtonElement;\n  close: () => void;\n}\n\nexport interface ModalActionButtonDef {\n  cb: (ref: ActionButtonArgs) => void;\n  name: string;\n  tooltip?: string;\n}\n\nexport interface MainModalParams {\n  content: (Node | TemplateRef<any, any>)[];\n  title?: string;\n  size?: ModalSizes;\n\n  /**\n   * Styles that will be inserted as a separate <style> tag to the page at the moment modal creation\n   * and remove after the modal closed\n   */\n  styles?: string;\n  actions?: ModalActionButtonDef[];\n  /**\n   * When modal DOM created, but before inserted to the page\n   */\n  onAfterInsert?: (ref: MainModalComponentRef) => void;\n  /**\n   * After internal all listeners removed, before removed from the page\n   */\n  onBeforeRemove?: (ref: MainModalComponentRef) => void;\n}\n\nexport class MainModalComponent implements Component, OnAfterInsert, OnBeforeRemove {\n\n  private static openedModalRefs = new Set<MainModalComponent>();\n\n  private prefix = `${this.$config.prefix}-main-modal`;\n  private transitionTimeMs = 200;\n  private openedBodyCssClass     = `${ this.prefix }-opened`;\n  private openedBackdropCssClass = `${ this.prefix }-backdrop--opened`;\n\n  private params: Required<MainModalParams> = {\n    content: [],\n    title: '',\n    size: 'md',\n    styles: '',\n    actions: [\n      { name: 'OK', cb: ({ close }) => close() },\n    ],\n    onAfterInsert: () => {},\n    onBeforeRemove: () => {},\n  };\n  private paramKeys = Object.keys(this.params) as (keyof Required<MainModalParams>)[];\n\n  private isShown = false;\n  private isPending = false;\n  private get isInserted(): boolean {\n    return MainModalComponent.openedModalRefs.has(this);\n  };\n  private ref?: MainModalComponentRef;\n\n  private lastDestroyCbs = new Hell();\n  private destroyCbs = new Hell();\n  private renderDestroyCbs = new Hell(this.destroyCbs);\n\n  private styles = `\n      body > * {\n        transition: filter ${ this.transitionTimeMs }ms ease-in-out;\n      }\n      body.${ this.openedBodyCssClass } > * {\n        filter: blur(4px);\n      }\n\n      body.${ this.openedBodyCssClass } > .${ this.prefix }-backdrop {\n        filter: none;\n      }\n      body.${ this.openedBodyCssClass } {\n        overflow: hidden;\n      }\n\n      /* Ripple effect */\n      .${this.prefix} .ripple {\n        background-position: center;\n        transition: background 0.8s;\n      }\n      .${this.prefix} .ripple:hover {\n        background: #47a7f5 radial-gradient(circle, transparent 1%, #47a7f5 1%) center/15000%;\n      }\n      .${this.prefix} .ripple:active {\n        background-color: #6eb9f7;\n        background-size: 100%;\n        transition: background 0s;\n      }\n\n      .${ this.prefix }-backdrop {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 10000000;\n        \n        transition: background-color ${ this.transitionTimeMs }ms ease-in-out;\n        background-color: transparent;\n      }\n      .${ this.openedBackdropCssClass } {\n        filter: none;\n        background-color: rgba(0, 0, 0, 0.1);\n      }\n      .${ this.prefix } {\n        display: flex;\n        flex-direction: column;\n        box-shadow: 0 0 40px 0 rgba(0,0,0,0.5);\n        background: #fff;\n        margin-top: 100%;\n        opacity: 0;\n        transition: all ${ this.transitionTimeMs }ms ease-in-out;\n        border-radius: 2px;\n      }\n      .${ this.openedBackdropCssClass } .${ this.prefix } {\n        margin-top: 0;\n        opacity: 1;\n      }\n      .${ this.prefix }--smw {\n        width: 400px;\n      }\n      .${ this.prefix }--sm {\n        width: 400px;\n        height: 300px;\n      }\n      .${ this.prefix }--md {\n        width: 600px;\n        height: 400px;\n      }\n      .${ this.prefix }--lg {\n        width: 900px;\n        height: 550px;\n      }\n      .${ this.prefix }__header {\n        height: 44px;\n        flex: 0 0 44px;\n        padding: 12px 30px;\n        overflow: hidden;\n        background-color: #2196f3;\n      }\n      .${ this.prefix }__title {\n        margin: 1px 0;\n        color: #fff;\n      }\n      .${ this.prefix }__close {\n        font-size: 28px;\n        display: block;\n        float: right;\n        width: 30px;\n        height: 30px;\n        line-height: 27px;\n        border-radius: 50%;\n        text-align: center;\n        margin-top: -5px;\n        margin-right: -7px;\n\n        color: #fff;\n        font-weight: bold;\n        cursor: pointer;\n      }\n      .${ this.prefix }__content {\n        padding: 12px 30px;\n        flex: 1 0 auto;\n        height: 100px;\n      }\n      .${ this.prefix }__actions {\n        flex: 0 0 66px;\n        height: 66px;\n        display: flex;\n        justify-content: flex-end;\n        padding: 15px;\n      }\n      .${ this.prefix }__action {\n        padding: 0 35px;\n        font-family: 'Montserrat', Arial, Helvetica, sans-serif;\n        text-align: center;\n        text-decoration: none;\n        /*text-transform: capitalize;*/\n        color: white;\n        border-radius: 2px;\n        border: none;\n        font-weight: bold;\n        font-size: 1.2em;\n        height: 100%;\n        line-height: 38px;\n        cursor: pointer;\n        color: white;\n        background-color: #2196f3;\n        box-shadow: 0 0 4px #999;\n        outline: none;\n      }\n      * + .${ this.prefix }__action {\n        margin-left: 15px;\n      }\n      .${ this.prefix }__action:disabled {\n        background-color: #70BFFF !important;\n        cursor: not-allowed;\n      }\n    `;\n\n  private backdropRenderer = this.$dom.makeRenderer(`<div class=\"${ this.prefix }-backdrop\"></div>`);\n  private actionButtonInterpolator = this.$dom.makeInterpolator<ActionButtonVars>(`\n      <button class=\"${this.prefix}__action ripple\"\n              title=\"{{ tooltip }}\"\n              data-select-all=\"action\"\n              data-action-button-idx=\"{{ actionButtonIdx }}\"\n      >{{ name }}</button>\n  `);\n  private modalRenderer = this.$dom.makeRenderer<MainModalVars, ModalTemplateRef>(`\n    <div class=\"${ this.prefix } ${ this.prefix }--{{ size }}\" data-select=\"modal\">\n      <div class=\"${ this.prefix }__header\">\n        <a role=\"button\" class=\"${ this.prefix }__close ripple\" data-select=\"close\">&times;</a>\n        <h3 class=\"${ this.prefix }__title\">{{ title }}</h3>\n      </div>\n      <div class=\"${ this.prefix }__content\" data-select=\"content\"></div>\n      <div class=\"${ this.prefix }__actions\" data-select=\"actions\">{{ actions }}</div>\n    </div>\n  `);\n\n  public constructor(\n    private readonly $dom: DomService,\n    private readonly $config: ConfigService,\n  ) {}\n\n  public async insertToBody(params: Partial<MainModalParams>): Promise<MainModalComponentRef> {\n    if (this.isInserted) {\n      throw new Error(`An attempt to insert the same MainModalComponent instance twice`);\n    }\n    MainModalComponent.openedModalRefs.add(this);\n\n    // Refreshing params & rerender\n    this.refreshParams(params);\n    const ref = await this.render(true);\n\n    // Inserting root element to the <body>\n    return this.$dom.append(document.body, ref);\n  }\n\n  public async remove(): Promise<void> {\n    if (!this.isInserted) {\n      throw new Error(`An attempt to remove not inserted MainModalComponent`);\n    }\n\n    await this.$dom.remove(this.ref!);\n    this.ref = undefined;\n    MainModalComponent.openedModalRefs.delete(this);\n  }\n\n  public async refresh(params: Partial<MainModalParams>): Promise<void> {\n    this.refreshParams(params);\n\n    if (this.isInserted) await this.render();\n  }\n\n  public onAfterInsert(): void {\n    if (this.params.styles) {\n      this.destroyCbs.add(this.$dom.insertGlobalStyles(this.params.styles));\n    }\n    // Inserting styles\n    if (MainModalComponent.openedModalRefs.size === 1) {\n      this.lastDestroyCbs.add(this.$dom.insertGlobalStyles(this.styles));\n      this.bindEscToClose();\n    }\n    this.bindEvents(this.ref!);\n\n    this.params.onAfterInsert(this.ref!);\n    setTimeout(() => this.toggle(true));\n  }\n\n  public async onBeforeRemove(): Promise<void> {\n    if (!await this.toggle(false)) return;\n\n    this.params.onBeforeRemove(this.ref!);\n\n    // for triggering hooks on the all child components\n    await this.$dom.remove(this.ref!.childComponentRefs);\n\n    // Removing global styles\n    if (MainModalComponent.openedModalRefs.size === 1) {\n      this.lastDestroyCbs.clear();\n    }\n\n    this.destroyCbs.clear();\n  }\n\n  /**\n   * @returns false in case toggling is in pending. Otherwise true.\n   */\n  private async toggle(show: boolean): Promise<boolean> {\n    if (this.isPending || !this.isInserted) return Promise.resolve(false);\n    if (this.isShown === show) return Promise.resolve(true);\n    this.isPending = true;\n    this.isShown = show;\n\n    const isOne = MainModalComponent.openedModalRefs.size === 1;\n\n    if (isOne && show) {\n      document.body.classList.add(this.openedBodyCssClass);\n      await later(this.transitionTimeMs);\n    }\n\n    const backdrop$ = this.ref!.root$;\n    show\n      ? backdrop$.classList.add(this.openedBackdropCssClass)\n      : backdrop$.classList.remove(this.openedBackdropCssClass);\n\n    if (isOne && !show) {\n      await later(this.transitionTimeMs);\n      document.body.classList.remove(this.openedBodyCssClass);\n    }\n\n    await later(this.transitionTimeMs);\n\n    this.isPending = false;\n    return true;\n  }\n\n  private async render(createRoot = false): Promise<MainModalComponentRef> {\n    this.renderDestroyCbs.clear();\n\n    if (createRoot) {\n      // @todo: wrong typings on the next lines\n      const tplRef: TemplateRef<ModalLinks, ActionButtonLinksAll> = this.backdropRenderer() as any;\n      this.ref = { ...tplRef, componentInstance: this, childComponentRefs: [] };\n    } else if (!this.ref) {\n      throw new Error(`.render() No .ref`);\n    } else {\n      await this.$dom.remove(this.ref.links.modal);\n      this.ref.links = {} as any;\n      this.ref.linksAll = {} as any;\n    }\n\n    const actionButtonsHtml = this.params.actions\n      .map(({ name, tooltip }, i) => this.actionButtonInterpolator({\n        name,\n        tooltip: tooltip !== undefined ? this.$dom.sanitizeAttrValue(tooltip) : '',\n        actionButtonIdx: i,\n      }))\n      .join('');\n\n    const modalRef = this.modalRenderer({\n      actions: actionButtonsHtml,\n      size: this.params.size,\n      title: this.params.title,\n    });\n\n    await this.$dom.append(this.ref, modalRef);\n    this.ref.links = { ...this.ref.links, ...modalRef.links };\n    this.ref.linksAll = { ...this.ref.linksAll, ...modalRef.linksAll };\n\n    const content$ = this.ref.links.content;\n    const contentToInsert = this.params.content; // preserving links to the array\n    await this.$dom.append(content$, contentToInsert);\n    this.renderDestroyCbs.add(() => this.$dom.remove(contentToInsert));\n\n    const childComponents = contentToInsert.filter(v => this.$dom.isComponentRef(v)) as ComponentRef[];\n    this.ref.childComponentRefs.push(...childComponents);\n\n    return this.ref;\n  }\n\n  private bindEvents(ref: MainModalComponentRef): void {\n    const baseArgs = {\n      component: this,\n      close: () => this.remove(),\n    };\n    const actionButtons: HTMLButtonElement[] = ref.linksAll.action;\n\n    actionButtons.forEach(button$ => {\n      const idx = button$.getAttribute('data-action-button-idx');\n      if (idx === null) {\n        throw new Error(`Action doesn't have data-action-button-idx attribute`);\n      }\n      const def = this.params.actions[+idx];\n      if (!def) {\n        throw new Error(`Can not find button definition by index: ${idx}`);\n      }\n\n      const cb = (event: MouseEvent) => def.cb({ ...baseArgs, event, button$ });\n      this.destroyCbs.add(this.$dom.addEventListener(button$, 'click', cb));\n    });\n\n    this.destroyCbs.add(\n      this.$dom.addEventListener(\n        ref.links.close,\n        'click',\n        () => this.remove(),\n      ),\n    );\n  }\n\n  private bindEscToClose(): void {\n    const destroyCb = this.$dom.addEventListener(\n      document,\n      'keydown',\n      (e: KeyboardEvent) => {\n        if (e.code !== 'Escape') return;\n        const last = this.getLastInsertedMainModal();\n        if (!last) {\n          throw new Error(`Don't have last inserted MainModalComponent, but Esc event not removed`);\n        }\n        last.remove();\n      },\n    );\n\n    this.lastDestroyCbs.add(destroyCb);\n  }\n\n  private refreshParams(params: Partial<MainModalParams>): void {\n    this.paramKeys\n        .filter(key => params[key] !== undefined)\n        // @ts-ignore\n        .forEach(key => this.params[key] = params[key]);\n  }\n\n  private getLastInsertedMainModal(): MainModalComponent | undefined {\n    let value: MainModalComponent | undefined;\n    for (value of MainModalComponent.openedModalRefs);\n    return value;\n  }\n\n}\n","export const later = <T>(delay: number, value?: T) => new Promise<T>(resolve => setTimeout(resolve, delay, value));\n","import { OnInit } from '../models';\n\nimport { ModalsService } from './modals.service';\nimport { DbService } from './db.service';\nimport { JenkinsService } from './jenkins.service';\nimport { ConfigService } from './config.service';\n\nexport class AppService implements OnInit {\n\n  public constructor(\n    private readonly $modals: ModalsService,\n    private readonly $db: DbService,\n    private readonly $jenkins: JenkinsService,\n    private readonly $config: ConfigService,\n  ) {}\n\n  public onInit(): void {\n    this.initDb();\n    this.buildOpenHotKey();\n  }\n\n  private buildOpenHotKey(): void {\n    const hk = this.$config.hotKeys.openMainModal;\n\n    document.addEventListener('keypress', v => {\n      if (!this.$db.hasSelectedBuildJob) {\n        return this.$modals.alert('Please, open a build job first.');\n      }\n\n           v.code     === `Key${ hk.key }`\n        && v.altKey   === hk.alt\n        && v.ctrlKey  === hk.ctrl\n        && v.shiftKey === hk.shift\n        && !this.$modals.isMainGridOpened\n        && this.$modals.openMainGrid()\n    });\n\n    const hotKeyLabel = (hk.ctrl  ? 'Ctrl+'  : '')\n                      + (hk.alt   ? 'Alt+'   : '')\n                      + (hk.shift ? 'Shift+' : '')\n                      +  hk.key;\n\n    console.info(`[Failed Test Comparator] loaded\\nPress ${hotKeyLabel} to open`);\n  }\n\n  private initDb(): void {\n    const buildJobName = this.$jenkins.retrieveBuildJobName();\n    if (buildJobName) {\n      this.$db.selectBuildJob(buildJobName);\n    }\n  }\n\n}\n","import { Config, HotKeyConfig, OnInit } from '../models';\n\nexport class ConfigService implements OnInit, Config {\n\n  public jiraUrl: string = '';\n  public prefix: string = 'ftc';\n  public dbName: string = `${ this.prefix }-db`;\n  public hotKeys: Config['hotKeys'] = {\n    openMainModal: {\n      ctrl: true,\n      alt: true,\n      shift: true,\n      key: 'Z',\n    },\n  };\n\n  public onInit(): void {\n    const openMainModalHotKey = window.ftcConfig\n                             && window.ftcConfig.hotKeys\n                             && window.ftcConfig.hotKeys.openMainModal;\n\n    if (openMainModalHotKey) {\n      if (this.validateHotKey(openMainModalHotKey)) {\n        this.hotKeys.openMainModal = openMainModalHotKey;\n      } else {\n        console.warn(new Error('.openMainModal Hot Key is invalid.'), openMainModalHotKey);\n      }\n    }\n\n    const jiraUrl = window.ftcConfig\n                    && window.ftcConfig.jiraUrl;\n    if (jiraUrl) {\n      this.jiraUrl = jiraUrl;\n    } else {\n      console.error('Please specify .jiraUrl in the config. I can\\'t build URL for tickets');\n    }\n  }\n\n  private validateHotKey(hotkey: any): hotkey is HotKeyConfig {\n    return hotkey\n        && typeof hotkey === 'object'\n        && typeof hotkey.ctrl  === 'boolean'\n        && typeof hotkey.alt   === 'boolean'\n        && typeof hotkey.shift === 'boolean'\n        && typeof hotkey.key   === 'string'\n        && /^[A-Z]$/.test(hotkey.key)\n      ;\n  }\n\n}\n","import { Build, ComparisonResult, OnInit } from '../models';\nimport { ConfigService } from './config.service';\n\ninterface DbBuildJobData {\n  builds: { [id: number]: Build };\n  buildsOrder: number[];\n  selectedBuildIds: { [buildId: number]: true };\n}\n\ninterface DbData {\n  version: number;\n  byBuildJob: { [buildJobName: string]: DbBuildJobData };\n}\n\nexport class DbService implements OnInit {\n\n  private data: DbData = this.makeInitialDb();\n\n  private currentBuildJobName?: string;\n\n\n  public get hasSelectedBuildJob(): boolean {\n    return !!this.currentBuildJobName;\n  }\n\n  public getCurrentBuildJob(): DbBuildJobData {\n    if (!this.currentBuildJobName) {\n      throw new Error(`An attempt to access current build job until the job selected`);\n    }\n\n    return this.data.byBuildJob[this.currentBuildJobName];\n  }\n\n  public constructor(\n    private readonly $config: ConfigService,\n  ) {}\n\n  public onInit(): void {\n    this.load()\n  }\n\n  public getBuildById(id: number): Build | undefined {\n    return this.getCurrentBuildJob().builds[id];\n  }\n\n  public getAllBuilds(): Build[] {\n    const bj = this.getCurrentBuildJob();\n    return bj.buildsOrder.map(id => bj.builds[id]);\n  }\n\n  public saveBuild(build: Build): void {\n    const bj = this.getCurrentBuildJob();\n    const was = !!bj.builds[build.id];\n    bj.builds[build.id] = build;\n    if (!was) {\n      bj.buildsOrder.push(build.id);\n      bj.buildsOrder.sort((a, b) => b - a);\n    }\n\n    this.save();\n  }\n\n  public getSelectedBuildIds(): number[] {\n    const bj = this.getCurrentBuildJob();\n    return Object.keys(bj.selectedBuildIds).map(v => +v);\n  }\n\n  public toggleBuildSelection(buildId: number, select: boolean): void {\n    const bj = this.getCurrentBuildJob();\n    const prevLen = Object.keys(bj.selectedBuildIds).length;\n\n    if (select) {\n      bj.selectedBuildIds[buildId] = true;\n    } else {\n      const { [buildId]: deleted, ...other } = bj.selectedBuildIds;\n      bj.selectedBuildIds = other;\n    }\n\n    if (Object.keys(bj.selectedBuildIds).length !== prevLen) {\n      this.save();\n    }\n  }\n\n  public selectBuildJob(buildJobName: string): void {\n    this.currentBuildJobName = buildJobName;\n\n    if (!this.data.byBuildJob[this.currentBuildJobName]) {\n      this.data.byBuildJob[this.currentBuildJobName] = this.makeEmptyBuildJob();\n      this.save();\n    }\n  }\n\n  public compareTwoSelectedBuild(): ComparisonResult {\n    const ids = this.getSelectedBuildIds();\n    if (ids.length !== 2) {\n      throw new Error(`Comparison requires 2 build selected. Now ${ids.length} build selected`);\n    }\n    const [first, second] = ids.map(id => this.getBuildById(id)) as Build[];\n\n    const onlyFirst = first.failedTests.filter(a => !second.failedTests.some(b => b.id === a.id));\n    const onlySecond = second.failedTests.filter(a => !first.failedTests.some(b => b.id === a.id));\n    const both = first.failedTests.filter(a => second.failedTests.some(b => b.id === a.id));\n\n    return {\n      first,\n      second,\n      onlyFirst,\n      onlySecond,\n      both,\n    };\n  }\n\n  public clearCurrentBuildJob(): void {\n    const bj = this.getCurrentBuildJob();\n    bj.selectedBuildIds = [];\n    bj.builds = {};\n    bj.buildsOrder = [];\n\n    this.save();\n  }\n\n  private save() {\n    // Prototype.js breaks JSON.stringify. We should use Prototype.js if it loaded.\n    const dataAsStr = typeof Object.toJSON === 'function'\n                      ? Object.toJSON(this.data)\n                      : JSON.stringify(this.data);\n\n    localStorage.setItem(this.$config.dbName, dataAsStr);\n  }\n\n  private load() {\n    const dataAsStr = localStorage.getItem(this.$config.dbName);\n    this.data = dataAsStr ? JSON.parse(dataAsStr) : this.makeInitialDb();\n  }\n\n  private makeInitialDb(): DbData {\n    return {\n      version: 1,\n      byBuildJob: {},\n    };\n  }\n\n  private makeEmptyBuildJob(): DbBuildJobData {\n    return {\n      builds: {},\n      buildsOrder: [],\n      selectedBuildIds: {},\n    };\n  }\n\n}\n","import { Build, BuildInfo, FailedTest } from '../models';\n\ninterface ESNextRegExpMatchArray extends RegExpMatchArray {\n  groups: { [key: string]: string };\n}\n\nexport class JenkinsService {\n\n  public isPageHasInfoAboutFailedTests(): boolean {\n    return !!document.querySelector('a[href=\"testReport/\"]');\n  }\n\n  public retrieveBuild(): Build {\n    if (!this.isPageHasInfoAboutFailedTests()) {\n      throw new Error(`The page doesn't contain any info about failed tests`);\n    }\n\n    return {\n      ...this.retrieveBuildInfo(),\n      failedTests: this.retrieveFailedTests(),\n    };\n  }\n\n  public retrieveBuildJobName(): string | undefined {\n    const name = location.pathname.replace(/^((?:\\/job\\/[\\w-]+)+).*?$/, '$1');\n    return name.length > 5 ? name : undefined;\n  }\n\n  private retrieveBuildInfo(): BuildInfo {\n    const h1$ = document.querySelector('h1');\n    if (!h1$ || !h1$.textContent) {\n      throw new Error(`Can't find <h1> or it hasn't .textContent`);\n    }\n\n    const match = h1$.textContent.match(/Build (?<id>\\d+):\\s+(?<name>\\w+)\\s*\\((?<date>[^()]+)\\)/) as ESNextRegExpMatchArray | null;\n    if (!match) {\n      throw new Error(`Can not parse <h1>`);\n    }\n\n    const { id, name, date } = match.groups;\n\n    const description$ = document.querySelector('#description') as HTMLElement | null;\n    if (!description$) {\n      throw new Error(`Can't find #description`);\n    }\n\n    const dynamic = description$.innerText\n      .split('\\n')\n      .map(v => v.split(/\\s*:\\s*/))\n      .reduce((res, [key, value]) => ({...res, [key]: value}), {});\n\n    return { id: +id, name, date, dynamic };\n  }\n\n  private retrieveFailedTests(): FailedTest[] {\n    const q = document.querySelectorAll('a[href=\"testReport/\"] + ul a[href^=\"testReport/junit/\"]');\n\n    return (new Array(...q) as HTMLAnchorElement[])\n      .map(v =>\n        (v.textContent || '').replace(/^.+?([A-Z]{2,10}_\\d+).+?$/, '$1'),\n      )\n      .map(id => ({ id }));\n  }\n}\n"],"sourceRoot":""}